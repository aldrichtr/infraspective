#+TITLE: infraspective module readme
#+INDEX: Projects!Tools
#+AUTHOR: Timothy Aldrich <mailto:timothy.r.aldrich@gmail.com>
#+STARTUP: overview hidestars
#+FILETAGS: PowerShell compliance Pester

| Status:   | Under Development (Pre-release) |
| Location: | [[https://github.com/aldrichtr/infraspective][github]]                          |
| Version:  | 0.2.1                          |

[[https://github.com/aldrichtr/infraspective/actions][file:https://github.com/aldrichtr/infraspective/workflows/Build%20pipeline/badge.svg]]

* Synopsis
  ~infraspective~ is a PowerShell module for testing (auditing, validating) infrastructure using the
  [[https://pester.dev][Pester Testing Module]] .

* Description
  ~infraspective~ reads tests (written in [[https://www.agilealliance.org/glossary/bdd/][BDD style]] , like Pester) and produces output that reports on compliance
  of your infrastructure to those tests.

  Originally, [[https://github.com/PowerShell/Operation-Validation-Framework][Operation Validation Framework]] used Pester tests organized in particular directories in your module.
  [[https://github.com/TicketMaster/poshspec][poshspec]] added a DSL for making those tests more expressive.  =infraspective= picks up where they left off, using
  modern Pester (there were some [[https://pester.dev/docs/migrations/breaking-changes-in-v5][breaking changes]] from v4 to v5) and adds in some concepts from other tools to
  create a Policy as Code tool.

  Starting with a test like:
  #+begin_src powershell
    Describe "Services" {
        It "DNS Service should be running" {
            $dns_service = Get-Service -Name 'DNS'
            $dns_service.Status | Should -Be Running
        }
    }
  #+end_src

  poshspec gave us the ability to write this like:

  #+begin_src powershell
    Describe "Services" {
        Service DNS Status { Should -Be Running }
        # i fixed it up for v5 a little
    }
  #+end_src

  ~infraspective~ picks up where these left off.

** Additional language features
   At this time (version 0.1) ~infraspective~ adds three new structures to organize and classify tests:
   - Control
   - Grouping
   - Checklist


*** Control
    A ~Control~ is =0 or more tests + metadata=.  If you are familiar with NIST STIGs then this example might
    look familiar

    #+begin_src powershell
      Control "SV-220697r569187_rule" -Resource "Windows" -Impact "medium" -Reference 'CCI:000366'-Title (
          "Domain-joined systems must use Windows 10 Enterprise Edition 64-bit version.") -Description (
              "Credential Guard use virtualization based security to protect...") {
                  Describe "Verify domain-joined systems are the proper version" {
                      BeforeAll {
                          $v = Get-WindowsVersion
                      }

                      It "Should be Windows 10" {
                          $v.ProductName | Should -match '^Windows 10'
                      }
                      It "Should be Enterprise Edition" {
                          $v.EditionID | Should -match 'Enterprise'
                      }
                      It "Should be 64 bit" {
                          [Environment]::Is64BitOperatingSystem | Should -BeTrue
                      }
                  }
              }
    #+end_src
*** Grouping
    A ~Grouping~ is a logical collection of 0 or more ~Grouping~s and or ~Control~s.  Meaning Groupings
    can be nested to provide whatever structure you need.  Continuing our Windows 10 STIG example:
    Next, one or more Controls together create a =Checklist=

    #+begin_src powershell
      Grouping "V-220697" -Title "SRG-OS-000480-GPOS-00227" {
          Control "SV-220697r569187_rule" -Resource "Windows" -Impact "medium" -Reference 'CCI:000366'-Title (
              "Domain-joined systems must use Windows 10 Enterprise Edition 64-bit version.") -Description (
                  "Credential Guard use virtualization based security to protect...") {
                      Describe "Verify domain-joined systems are the proper version" {
                          BeforeAll {
                              $v = Get-WindowsVersion
                          }

                          It "Should be Windows 10" {
                              $v.ProductName | Should -match '^Windows 10'
                          }
                          It "Should be Enterprise Edition" {
                              $v.EditionID | Should -match 'Enterprise'
                          }
                          It "Should be 64 bit" {
                              [Environment]::Is64BitOperatingSystem | Should -BeTrue
                          }
                      }
                  }
      }
    #+end_src

*** Checklist
    A ~Checklist~ is a collection of ~Control~s that define a given audit criteria.  Since we are already
    using the example so far, a Checklist would be analogous to the [[https://stigviewer.com/stig/windows_10/][Windows 10 STIG Version 2]]

    #+begin_src powershell
      Checklist "MS Windows 10 STIG V2R3" -Title "Microsoft Windows 10 Security Technical Implementation Guide" -Version
      '3.2.2.36079' {
          Grouping "V-220697" -Title "SRG-OS-000480-GPOS-00227" {
              Control "SV-220697r569187_rule" -Resource "Windows" -Impact "medium" -Reference 'CCI:000366'-Title (
                  "Domain-joined systems must use Windows 10 Enterprise Edition 64-bit version.") -Description (
                      "Credential Guard use virtualization based security to protect...") {
                          Describe "Verify domain-joined systems are the proper version" {
                              BeforeAll {
                                  $v = Get-WindowsVersion
                              }

                              It "Should be Windows 10" {
                                  $v.ProductName | Should -match '^Windows 10'
                              }
                              It "Should be Enterprise Edition" {
                                  $v.EditionID | Should -match 'Enterprise'
                              }
                              It "Should be 64 bit" {
                                  [Environment]::Is64BitOperatingSystem | Should -BeTrue
                              }
                          }
                      }
          }
      }
    #+end_src
* Notes
  By convention, =Checklists= are stored in files name *.Audit.ps1 , and they can be run by calling
  =Invoke-Infraspective <directory>=

* Example
  #+begin_src powershell
    Import-Module infraspective
    Invoke-Infraspective <path/to/files>
  #+end_src
