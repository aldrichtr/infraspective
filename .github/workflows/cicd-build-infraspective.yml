name: Create a release of the PowerShell module
# This workflow creates a .nupkg file and publishes it to the repository's package feed
# feed url is <repository_url>/pkgs/nuget/<repository_name>

on:
  workflow_dispatch:

env:
  gh_token: ${{ secrets.GITHUB_TOKEN }}

jobs:
  Build:
    name: Test and Compile individual files into a PowerShell Module
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check the Cache for required modules
        id: cache-modules
        uses: actions/cache@v3
        with:
          path: C:\Users\runneradmin\Documents\PowerShell\Modules
          key: ${{ runner.os }}-${{ hashFiles('**/requirements.psd1') }}
          restore-keys: |
            ${{ runner.os }}-psdepend-

        # PSDepend2 reads modules from 'requirements.psd1' and installs them
        # according to the options in the file and/or the command line.
      - name: Install PSDepend2 from PSGallery
        if: ${{ steps.cache-modules.outputs.cache-hit == false }}
        run: |
          $current_user_mod_path = ($env:PSModulePath -split ';')[0]
          Write-Host "PowerShell Modules in $current_user_mod_path"

          Set-PSRepository psgallery -InstallationPolicy trusted
          Write-Host -ForegroundColor Green "Installing PSDepend2"
          Install-Module PSDepend2 -Scope CurrentUser -Confirm:$false -Force


      - name: Install requirements
        if: ${{ steps.cache-modules.outputs.cache-hit == false }}
        run: |
          Write-Host -ForegroundColor Green "Now using PSDepend2 to install the rest of the required Modules"
          Import-Module PSDepend2
          Invoke-PSDepend -Path "." -Recurse:$true -Tags 'ci' -Test | Format-Table DependencyName, Version, DependencyType

          Invoke-PSDepend -Path "." -Recurse:$true -Confirm:$false -Target 'CurrentUser' -Tags 'ci'

      - name: Capture the environment
        continue-on-error: true
        run: |
          Get-ChildItem env:
          Get-PSVersionTable
          Get-InstalledModule

      # The Configure task ensures that directories, files and variables
      # are present before the other tasks are run.
      - name: Configure the project
        run: Invoke-Build Configure

      # Run Pester Tests on files in source directory
      - name: UnitTest the source files
        run: Invoke-Build UnitTest

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-report
          path: out/*.xml
          retention-days: 7

      - name: Stage the module components
        if: ${{ success() }}
        run: Invoke-Build Stage

      - name: Upload the staged module
        uses: actions/upload-artifact@v3
        with:
          name: staged-module-and-manifest
          path: |
            stage/infraspective/infraspective.psm1
            stage/infraspective/infraspective.psd1
          retention-days: 1

      - name: Package the nuget module
        if: ${{ success() }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          Invoke-Build Package

          dotnet tool install --global gpr
          gpr push -k $env:GITHUB_TOKEN .\out\infraspective\*.nupkg -r https://github.com/${{github.repository}}
